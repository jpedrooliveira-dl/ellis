# A seção 'services' é onde definimos os diferentes contêineres que compõem nossa aplicação.
services:
  # 'api' é o nome que damos ao nosso serviço/contêiner. Poderia ser qualquer nome, como 'web' ou 'backend'.
  api:
    # A instrução 'build' diz ao Docker Compose para construir uma imagem a partir de um Dockerfile.
    # O '.' indica que o Dockerfile está no mesmo diretório que este arquivo docker-compose.yml.
    build: .
    # Define um nome específico e amigável para o contêiner quando ele for criado.
    # Se não definirmos, o Docker geraria um nome aleatório.
    container_name: conteiner_api
    # Sobrescreve o comando padrão da imagem.
    # Aqui, estamos dizendo ao contêiner para iniciar o servidor Uvicorn, que executa nossa aplicação FastAPI.
    # --host 0.0.0.0: Faz a aplicação ser acessível de fora do contêiner.
    # --port 8000: Expõe a aplicação na porta 8000 dentro do contêiner.
    # --reload: Reinicia o servidor automaticamente sempre que um arquivo de código é alterado (ótimo para desenvolvimento).
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    # A seção 'volumes' sincroniza arquivos e pastas entre a sua máquina (host) e o contêiner.
    volumes:
      # Mapeia o diretório atual ('.') da sua máquina para o diretório '/app' dentro do contêiner.
      # Isso significa que qualquer alteração que você fizer no código na sua máquina será refletida instantaneamente dentro do contêiner.
      - .:/app
    # A seção 'ports' mapeia as portas entre a sua máquina (host) e o contêiner.
    ports:
      # Mapeia a porta 8000 da sua máquina para a porta 8000 do contêiner.
      # Isso permite que você acesse a aplicação no seu navegador em http://localhost:8000.
      # O formato é "PORTA_NA_SUA_MAQUINA:PORTA_DENTRO_DO_CONTAINER".
      - "8000:8000" 